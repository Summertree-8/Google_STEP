#! usr/bin/python3
# -*- coding: utf-8 -*-

def open_file():
    pages = {}
    links = {}

    with open('data/pages.txt' ,encoding="utf8", errors='ignore') as f:
        for data in f.read().splitlines():
            page = data.split('\t')
            # page[0]: id, page[1]: title
            pages[page[0]] = page[1]

    with open('data/links.txt' ,encoding="utf8", errors='ignore') as f:
        for data in f.read().splitlines():
            link = data.split('\t')
            # link[0]: id (from), links[1]: id (to)
            if link[0] in links:
                links[link[0]].add(link[1])
            else:
                links[link[0]] = {link[1]}
    return pages, links;


#Returns page id of start page and end page
def find_start_end_id(pages):
    for k, v in pages.items():
        if v == 'Google':
            start_id = k;
        if v == 'æ¸‹è°·':
            end_id = k;
    return start_id, end_id;


#Returns connected pages of page_id
def list_of_connected(links, page_id):
    connect = []
    for k, v in links.items():
        if k == page_id:
            connect = list(v)
    return connect


#Checkes whether page_id is in visited
def visited_pages(visited, page_id):
    return(page_id in visited)


'''
Shows shortest route from start page to end page
|Q|: queue used for BFS
|visited|: list of visited page ids
|page_id|: id of page being assessed
|connected|: list of page ids connected from "page_id"
|path|: {key = id of page x : value = page ids connected from page x}
|route|: shortest route from start page to end page
'''
def find_connected_page(pages, links, start_id, end_id):
    Q = [start_id]
    visited = []
    path = {}
    while (len(Q) != 0):
        page_id = Q.pop(-1)
        connected = list_of_connected(links, page_id)
        visited.append(page_id)
        if(page_id == end_id):
            print("found!!")
            break;
        else:
            if(len(visited) == len(pages)):
                print("not found.....")
                exit(1)
            while(len(connected) != 0):
                if(visited_pages(visited, connected[-1]) != True):
                    path.setdefault(page_id, []).append(connected[-1])
                    Q.insert(0, connected.pop())
                else:
                    connected.pop()
    route = find_route(pages, path, page_id, start_id, end_id)
    while (len(route) != 0):
        print(find_pagename(pages, route.pop(0)))


#Finds shortest route from path
def find_route(pages, path, page_id, start_id, end_id):
    route = []
    route.append(end_id)
    for i in path:
        if(page_id in  path[i]):
            route.insert(0, i)
            page_id = i
            if(page_id == start_id):
                break;
    route.insert(0, start_id)
    return route


#Returns page name from pageid
def find_pagename(pages, pageid):
    for k, v in pages.items():
        if k == pageid:
            page_name = v;
    return page_name;


def main():
    (pages, links) = open_file()
    (start_id, end_id) = find_start_end_id(pages)
    find_connected_page(pages, links, start_id, end_id)


if __name__ == '__main__':
    main()