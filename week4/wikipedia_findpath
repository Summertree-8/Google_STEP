#! usr/bin/python3
# -*- coding: utf-8 -*-

def open_file():
    pages = {}
    links = {}

    with open('data/pages.txt' ,encoding="utf8", errors='ignore') as f:
        for data in f.read().splitlines():
            page = data.split('\t')
            # page[0]: id, page[1]: title
            pages[page[0]] = page[1]

    with open('data/links.txt' ,encoding="utf8", errors='ignore') as f:
        for data in f.read().splitlines():
            link = data.split('\t')
            # link[0]: id (from), links[1]: id (to)
            if link[0] in links:
                links[link[0]].add(link[1])
            else:
                links[link[0]] = {link[1]}
    print('opened filess')
    return pages, links;


#Returns page id from page name
def find_page_id(pages, links):
    for k, v in pages.items():
        if v == 'Google':
            print('Start_id Google', k)
            start_id = k;
        if v == '渋谷':
            end_id = k;
            print('end_id = ', end_id)
    return start_id, end_id;


#Returns connected pages
def list_of_connected(links, page_id):
    connect = []
    for k, v in links.items():
        if k == page_id:
            connect = list(v)
    return connect


#Examine whether it is the page looking for
def find_end_page(connected, end_id):
    return (end_id in connected)


def visited_pages(visited, page_id):
    return(page_id in visited)


#
def find_connected_page(pages, links, start_id, end_id):
    print(pages)
    Q = [start_id]
    visited = []
    path = {}
    while (len(Q) != 0):
        #Qの最後取り出す
        page_id = Q.pop(-1)

        #page_idが見ているページのidたち
        connected = list_of_connected(links, page_id)

        #visitedに追加
        visited.append(page_id)
#         print('visited = ',visited)

        #目標のページが見つかった
        if(find_end_page(page_id, end_id) == True):
            print("found!!")
            break;
        else:
            if(len(visited) == len(pages)):
                print("not found.....")
                exit(1)
            #visitedで無ければQの最初に追加
            while(len(connected) != 0):
                if(visited_pages(visited, connected[-1]) != True):
                    path.setdefault(page_id, []).append(connected[-1])
                    Q.insert(0, connected.pop())
                else:
                    connected.pop()

    show_path(pages, path, page_id, start_id, end_id)


def show_path(pages, path, page_id, start_id, end_id):
    path2 = []
    path2.append(end_id)
    for i in path:
        if(page_id in  path[i]):
            path2.insert(0, i)
            page_id = i
            if(page_id == start_id):

                break;
    path2.insert(0, start_id)
    while (len(path2) != 0):
        print(find_pagename(pages, path2.pop(0)))


def find_pagename(pages, iddd):
    for k, v in pages.items():
        if k == iddd:
            pagename = v;
    return pagename;


def main():
    (pages, links) = open_file()
    (start_id, end_id) =  find_page_id(pages, links)
    find_connected_page(pages, links, start_id, end_id)


if __name__ == '__main__':
    main()