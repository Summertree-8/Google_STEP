#! /usr/bin/python3
# from numpy.core.defchararray import index

def read_number(line, index):
    number = 0
    while index < len(line) and line[index].isdigit():
        number = number * 10 + int(line[index])
        index += 1
    if index < len(line) and line[index] == '.':
        index += 1
        decimal = 0.1
        while index < len(line) and line[index].isdigit():
            number += int(line[index]) * decimal
            decimal /= 10
            index += 1
    token = {'type': 'NUMBER', 'number': number}
    return token, index


def read_plus(line, index):
    token = {'type': 'PLUS'}
    return token, index + 1


def read_minus(line, index):
    token = {'type': 'MINUS'}
    return token, index + 1


def read_times(line, index):
    token = {'type': 'TIMES'}
    return token, index + 1


def read_division(line, index):
    token = {'type': 'DIVISION'}
    return token, index + 1


def read_bracket_left(line, index):
    token = {'type': 'BRACKET_LEFT'}
    return token, index + 1


def read_braket_right(line, index):
    token = {'type': 'BRACKET_RIGHT'}
    return token, index + 1


def tokenize(line):
    tokens = []
    index = 0
    while index < len(line):
        if line[index].isdigit():
            (token, index) = read_number(line, index)
        elif line[index] == '+':
            (token, index) = read_plus(line, index)
        elif line[index] == '-':
            (token, index) = read_minus(line, index)
        elif line[index] == '*':
            (token, index) = read_times(line, index)
        elif line[index] == '/':
            (token, index) = read_division(line, index)
        elif line[index] == '(':
            (token, index) = read_bracket_left(line, index)
        elif line[index] == ')':
            (token, index) = read_braket_right(line, index)
        else:
            print('Invalid character found: ' + line[index])
            exit(1)
        tokens.append(token)
    return tokens


def evaluate_inbaracket(tokens):
    index = 0
    inbracket_evaluated = []
    while index < len(tokens):
        if tokens[index]['type'] == 'BRACKET_RIGHT':
            inbracket = []
            while(inbracket_evaluated[-1]['type'] != 'BRACKET_LEFT'):
                inbracket.insert(0, inbracket_evaluated.pop())
            inbracket_evaluated.pop()
            inbracket_evaluated.append({'type': 'NUMBER', 'number': evaluate(inbracket)})
        else:
            inbracket_evaluated.append(tokens[index])
        index += 1
    return inbracket_evaluated


#evaluate */+-
def evaluate_operator(tokens):
    operator_evaluated = 0
    tokens.insert(0, {'type': 'PLUS'}) # Insert a dummy '+' token
    index = 1

    while index < len(tokens):
        if tokens[index]['type'] == 'NUMBER':
            if tokens[index - 1]['type'] == 'TIMES':
                tokens[index-2]['number'] = tokens[index-2]['number']*tokens[index]['number']
                del tokens[index]
                del tokens[index-1]
                index -= 1
            elif tokens[index - 1]['type'] == 'DIVISION':
                tokens[index-2]['number'] = tokens[index-2]['number']/tokens[index]['number']
                del tokens[index]
                del tokens[index-1]
                index -= 1
        index += 1

    index = 1
    while index < len(tokens):
        if tokens[index]['type'] == 'NUMBER':
            if tokens[index - 1]['type'] == 'PLUS':
                operator_evaluated += tokens[index]['number']
            elif tokens[index - 1]['type'] == 'MINUS':
                operator_evaluated -= tokens[index]['number']
            else:
                print('Invalid syntax')
                exit(1)
        index += 1
    return operator_evaluated


def evaluate(tokens):
    inbracket_evaluated = evaluate_inbaracket(tokens)
    answer = evaluate_operator(inbracket_evaluated)
    return answer


def test(line):
    tokens = tokenize(line)
    actual_answer = evaluate(tokens)
    expected_answer = eval(line)
    if abs(actual_answer - expected_answer) < 1e-8:
        print("PASS! (%s = %f)" % (line, expected_answer))
    else:
        print("FAIL! (%s should be %f but was %f)" % (line, expected_answer, actual_answer))


# Add more tests to this function :)
def run_test():
    print("==== Test started! ====")
    test("1+2")
    test("1.0+2.1-3")
    test("-5-6-7.9")

    test("3*5")
    test("10*10000*0.99999")

    test("18/6")
    test("1000/10/10/10")
    test("0.56/0.45/0.3333")

    test("1+2.5-3/1.0+20*5")
    test("2000/200+0.55+5-8*3*3.0*0.3")

    test("(1+5)")
    test("(3+5)*(7-3)")
    test("3*((5+10)-10)")
    test("-(3+5)*8-0.5")
    test("1/8*(2)")
    test("-(3-(5*6/(27*7-25/0.4)-(8-2)*4-9))*0.3")

    print("==== Test finished! ====\n")

run_test()

while True:
    print('> ', end="")
    line = input()
    tokens = tokenize(line)
    answer = evaluate(tokens)
    print("answer = %f\n" % answer)
